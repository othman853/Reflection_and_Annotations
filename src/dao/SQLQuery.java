package dao;

import java.lang.reflect.Field;

import annotation.AutoGenerated;
import annotation.Id;
import exception.QueryBuildException;

public final class SQLQuery<T> {
	
	private static final String INSERT_INTO  = "INSERT INTO ";
	private static final String VALUES  = " VALUES ";
	
	private StringBuilder builder;
	
	public SQLQuery(){
		builder = new StringBuilder();		
	}

	public SQLQuery<T> insert(T t) throws QueryBuildException {	
		
		Class objectClass = t.getClass();
		Field[] fields = t.getClass().getDeclaredFields();
		
		builder
		.append(INSERT_INTO)
		.append(objectClass.getSimpleName())
		.append("(");
		
		Field field;
		for (int i = 0; i <fields.length; i++) {
			field = fields[i];			
			field.setAccessible(true);			
			
			if (isFieldEmpty(field, t)) {
				continue;
			}
			
			if( (!field.getType().isPrimitive()) && (!field.getType().getClass().equals(String.class)) ){
				continue;
			}
			
			if((field.getAnnotation(Id.class) != null && field.getAnnotation(AutoGenerated.class) == null) || 
				field.getAnnotation(Id.class) == null){
				
				String name = field.getName().toLowerCase();
				builder.append(name);
				
				if(i < fields.length -2 ){
					builder.append(", ");
				}								
			}
		}
		
		builder.append(")");

		return this;
	}

	public SQLQuery<T> from() {
		return this;
	}

	private boolean isFieldEmpty(Field field, T t) throws QueryBuildException {
		try {
			Class type = field.getType();
			Object value = field.get(t);

			if (type == boolean.class && Boolean.FALSE.equals(value)) {
				return true;
			}

			if (type.isPrimitive() && ((Number) value).doubleValue() == 0) {
				return true;
			}

			if (!type.isPrimitive() && value == null) {
				return true;
			}
		} catch (Exception ex) {
			throw new QueryBuildException(ex.getClass().getSimpleName() + ": " + ex.getMessage());
		}

		return false;
	}
}